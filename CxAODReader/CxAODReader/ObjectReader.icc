// Dear emacs, this is -*-c++-*-
#include <xAODRootAccess/TActiveStore.h>
#include <xAODRootAccess/TStore.h>

template <class partContainer>
ObjectReader<partContainer>::ObjectReader(const std::string& containerName,
                                          xAOD::TEvent* event)
    : ObjectReaderBase(containerName, event), m_nominalContainer(nullptr) {}

template <class partContainer>
void ObjectReader<partContainer>::discoverVariations(TTree* collectionTree,
                                                     bool checkContainer) {
  Info("ObjectReader::discoverVariations()",
       ("Reading variations for container '" + m_containerName + "'").c_str());

  if (!collectionTree) {
    Warning("ObjectReader::discoverVariations()",
            "No collection tree defined!");
    return;
  }
  //collectionTree->LoadTree(0);
  TObjArray* branches = collectionTree->GetListOfBranches();
  TString suffix = "Aux.";

  m_haveNominal = false;
  m_variations.clear();

  for (int i = 0; i < branches->GetSize(); i++) {
    // TODO could also use m_event->contains()
    TBranch* branch = (TBranch*)branches->At(i);
    TString name = branch->GetName();
    bool match = true;
    match &= name.BeginsWith((m_containerName + "___").c_str());
    match &= name.EndsWith(suffix);
    if (match) {
      int prefixLength = m_containerName.length() + 3;
      int varLength = name.Length() - prefixLength - suffix.Length();
      TString varName = name(prefixLength, varLength);
      //check that container is also retrievable...otherwise skip systematic and throw a warning
      TString containerName = name(0, prefixLength + varLength);
      if (checkContainer) {
        if (!m_event->contains<partContainer>(containerName.Data())) {
          Warning("ObjectReader::discoverVariations()",
                  "Failed to retrieve container  '" + containerName +
                      "'. Skip systematic variation!");
          continue;
        }
      }
      //std::cout << varName.Data() << std::endl;
      if (varName.EqualTo("Nominal")) {
        m_haveNominal = true;
      }
      m_variations.insert(varName.Data());
    }
  }
  if (m_variations.size() == 0) {
    Warning("ObjectReader::discoverVariations()",
            ("No variations for container '" + m_containerName + "' found!")
                .c_str());
  } else if (!m_haveNominal) {
    Warning("ObjectReader::discoverVariations()",
            ("No 'Nominal' variation for container '" + m_containerName +
             "' found!")
                .c_str());
  }
}

template <class partContainer>
std::pair<partContainer*, xAOD::ShallowAuxContainer*>
ObjectReader<partContainer>::createShallowCopy(const partContainer* container) {
  return xAOD::shallowCopyContainer(*container);
}

template <class partContainer>
const partContainer* ObjectReader<partContainer>::getObjects(
    std::string variation) {
  if (!m_haveNominal) {
    return nullptr;
  }

  // set variation to 'Nominal' if the requested one does not exist
  if(! m_variations.count(variation)) {
    variation = "Nominal";
  }

  // use the cached Nominal version if it exists
  if(variation == "Nominal" && m_nominalContainer) {
    return m_nominalContainer;
  }

  const partContainer* container = nullptr;

  // try to get shallow copy if requested
  if (m_createShallowCopies) {
    xAOD::TStore* store = xAOD::TActiveStore::store();
    std::string containerName = m_containerName + "___" + variation + "_SC";
    if (store->contains<partContainer>(containerName.c_str())) {
      if (store->retrieve(container, containerName.c_str()).isSuccess()) {
        return container;
      } else {
        Warning("ObjectReader::getObjects()",
                ("Failed to retrieve container '" + containerName +
                 " from active TStore'!")
                    .c_str());
      }
    }
  }

  // ensure Nominal container is read before any variation
  if (variation == "Nominal" || !m_nominalWasRead) {
    std::string containerName = m_containerName + "___Nominal";
    if (!m_event->retrieve(container, containerName.c_str()).isSuccess()) {
      Warning("ObjectReader::getObjects()",
              ("Failed to retrieve nominal container '" + containerName + "'!")
                  .c_str());
      m_haveNominal = false;
    }
    m_nominalWasRead = true;
    // cache the nominal
    if(variation == "Nominal") {
      m_nominalContainer = container;
    }
  }

  // read variation if not Nominal requested
  if (variation != "Nominal") {
    std::string containerName = m_containerName + "___" + variation;
    if (!m_event->retrieve(container, containerName.c_str()).isSuccess()) {
      Warning(
          "ObjectReader::getObjects()",
          ("Failed to retrieve container '" + containerName + "'!").c_str());
    }
  }

  // create shallow copy if requested
  if (m_createShallowCopies) {
    std::pair<partContainer*, xAOD::ShallowAuxContainer*> shallowCopyCont =
        createShallowCopy(container);
    // Record containers in active TStore
    xAOD::TStore* store = xAOD::TActiveStore::store();
    std::string containerName = m_containerName + "___" + variation + "_SC";
    if (!store->record(shallowCopyCont.first, containerName.c_str())
             .isSuccess()) {
      Warning("ObjectReader::getObjects()",
              ("Failed to record container '" + containerName +
               " to active TStore'!")
                  .c_str());
    }
    if (!store->record(shallowCopyCont.second, (containerName + "Aux.").c_str())
             .isSuccess()) {
      Warning("ObjectReader::getObjects()",
              ("Failed to record aux container '" + containerName +
               " to active TStore'!")
                  .c_str());
    }
    container = shallowCopyCont.first;
    // update the cache of Nominal in case of SC
    if(variation == "Nominal") {
      m_nominalContainer = container;
    }
  }
  return container;
}

template <class partContainer>
void ObjectReader<partContainer>::clearEvent() {
  m_nominalContainer = nullptr;
  m_nominalWasRead = false;
}
